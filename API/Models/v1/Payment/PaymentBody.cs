// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using API.Models.v1;
//
//    var paymentBody = PaymentBody.FromJson(jsonString);

namespace API.Models.v1
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PaymentBody
    {
        [JsonProperty("invoiceIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<int> InvoiceIds { get; set; }

        [JsonProperty("shoppingCartId", NullValueHandling = NullValueHandling.Ignore)]
        public string ShoppingCartId { get; set; }

        [JsonProperty("paymentType", NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentType { get; set; }

        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [JsonProperty("paidByAccountType", NullValueHandling = NullValueHandling.Ignore)]
        public string PaidByAccountType { get; set; }

        [JsonProperty("paidByAccountNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string PaidByAccountNumber { get; set; }

        [JsonProperty("escrowTransferredToAccountNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string EscrowTransferredToAccountNumber { get; set; }

        [JsonProperty("paymentDate", NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentDate { get; set; }

        [JsonProperty("checkNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string CheckNumber { get; set; }

        [JsonProperty("transactionId", NullValueHandling = NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        [JsonProperty("overpaymentGoesToEscrow", NullValueHandling = NullValueHandling.Ignore)]
        public string OverpaymentGoesToEscrow { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }

        [JsonProperty("subCategory", NullValueHandling = NullValueHandling.Ignore)]
        public string SubCategory { get; set; }

        [JsonProperty("setStatus", NullValueHandling = NullValueHandling.Ignore)]
        public string SetStatus { get; set; }

        [JsonProperty("setPermitIssueDate", NullValueHandling = NullValueHandling.Ignore)]
        public string SetPermitIssueDate { get; set; }

        [JsonProperty("setPermitExpirationDate", NullValueHandling = NullValueHandling.Ignore)]
        public string SetPermitExpirationDate { get; set; }

        [JsonProperty("letterToSend", NullValueHandling = NullValueHandling.Ignore)]
        public string LetterToSend { get; set; }

        [JsonProperty("autoApproveSpecialActions", NullValueHandling = NullValueHandling.Ignore)]
        public bool AutoApproveSpecialActions { get; set; }
    }

    public partial class PaymentBody
    {
        public static PaymentBody FromJson(string json) => JsonConvert.DeserializeObject<PaymentBody>(json, API.Models.v1.Converter.Settings);

        public PaymentBody(List<int> invoiceIds, string paymentType, double amount,
            string paidByAccountType = null, string paidByAccountNumber = null, string escrowTransferredToAccountNumber = null,
            string paymentDate = null, string checkNumber = null, string transactionId = null, string overpaymentGoesToEscrow = null,
            string category = null, string subCategory = null, string setStatus = null, string setPermitIssueDate = null, string setPermitExpirationDate = null,
            string letterToSend = null, bool autoApproveSpecialActions = false)
        {
            this.InvoiceIds = invoiceIds;
            this.PaymentType = paymentType;
            this.Amount = amount;
            this.PaidByAccountType = paidByAccountType;
            this.PaidByAccountNumber = paidByAccountNumber;
            this.EscrowTransferredToAccountNumber = escrowTransferredToAccountNumber;
            this.PaymentDate = paymentDate;
            this.CheckNumber = checkNumber;
            this.TransactionId = transactionId;
            this.OverpaymentGoesToEscrow = overpaymentGoesToEscrow;
            this.Category = category;
            this.SubCategory = subCategory;
            this.SetStatus = setStatus;
            this.SetPermitIssueDate = setPermitIssueDate;
            this.SetPermitExpirationDate = setPermitExpirationDate;
            this.LetterToSend = letterToSend;
            this.AutoApproveSpecialActions = autoApproveSpecialActions;
        }
        public PaymentBody(string shoppingCart, string paymentType, double amount,
            string paidByAccountType = null, string paidByAccountNumber = null, string escrowTransferredToAccountNumber = null,
            string paymentDate = null, string checkNumber = null, string transactionId = null, string overpaymentGoesToEscrow = null,
            string category = null, string subCategory = null, string setStatus = null, string setPermitIssueDate = null, string setPermitExpirationDate = null,
            string letterToSend = null, bool autoApproveSpecialActions = false)
        {
            this.ShoppingCartId = shoppingCart;
            this.PaymentType = paymentType;
            this.Amount = amount;
            this.PaidByAccountType = paidByAccountType;
            this.PaidByAccountNumber = paidByAccountNumber;
            this.EscrowTransferredToAccountNumber = escrowTransferredToAccountNumber;
            this.PaymentDate = paymentDate;
            this.CheckNumber = checkNumber;
            this.TransactionId = transactionId;
            this.OverpaymentGoesToEscrow = overpaymentGoesToEscrow;
            this.Category = category;
            this.SubCategory = subCategory;
            this.SetStatus = setStatus;
            this.SetPermitIssueDate = setPermitIssueDate;
            this.SetPermitExpirationDate = setPermitExpirationDate;
            this.LetterToSend = letterToSend;
            this.AutoApproveSpecialActions = autoApproveSpecialActions;
        }
    }

    //public static class Serialize
    //{
    //    public static string ToJson(this PaymentBody self) => JsonConvert.SerializeObject(self, API.Models.v1.Converter.Settings);
    //}

    //internal static class Converter
    //{
    //    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    //    {
    //        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
    //        DateParseHandling = DateParseHandling.None,
    //        Converters =
    //        {
    //            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
    //        },
    //    };
    //}
}
