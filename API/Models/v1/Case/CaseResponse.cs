// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using API.Models.v1;
//
//    var caseResponse = CaseResponse.FromJson(jsonString);

namespace API.Models.v1
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Case : CryWolf
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("agency", NullValueHandling = NullValueHandling.Ignore)]
        public string Agency { get; set; }

        [JsonProperty("accountNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

        [JsonProperty("accountStatus", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountStatus { get; set; }

        [JsonProperty("falseAlarmNumber", NullValueHandling = NullValueHandling.Ignore)]
        public long? FalseAlarmNumber { get; set; }

        //[JsonProperty("monitoringCompanyId", NullValueHandling = NullValueHandling.Ignore)]
        //public string MonitoringCompanyId { get; set; }

        //[JsonProperty("monitoringCompany", NullValueHandling = NullValueHandling.Ignore)]
        //public MonitoringCompany MonitoringCompany { get; set; }

        [JsonProperty("incidentDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? IncidentDateTime { get; set; }

        [JsonProperty("incidentType", NullValueHandling = NullValueHandling.Ignore)]
        public string IncidentType { get; set; }

        [JsonProperty("timeDispatched", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? TimeDispatched { get; set; }

        [JsonProperty("timeOnScene", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? TimeOnScene { get; set; }

        [JsonProperty("timeCleared", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? TimeCleared { get; set; }

        [JsonProperty("dispatcherName", NullValueHandling = NullValueHandling.Ignore)]
        public string DispatcherName { get; set; }

        [JsonProperty("dispatcherRemarks", NullValueHandling = NullValueHandling.Ignore)]
        public string DispatcherRemarks { get; set; }

        [JsonProperty("callTakerName", NullValueHandling = NullValueHandling.Ignore)]
        public string CallTakerName { get; set; }

        [JsonProperty("beat", NullValueHandling = NullValueHandling.Ignore)]
        public string Beat { get; set; }

        [JsonProperty("unitsAssigned", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> UnitsAssigned { get; set; }

        [JsonProperty("officerRemarks", NullValueHandling = NullValueHandling.Ignore)]
        public string OfficerRemarks { get; set; }

        [JsonProperty("clearanceCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ClearanceCode { get; set; }

        [JsonProperty("isIgnored", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsIgnored { get; set; }

        [JsonProperty("isFalseAlarm", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsFalseAlarm { get; set; }

        [JsonProperty("isExempt", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsExempt { get; set; }

        [JsonProperty("isDeleted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [JsonProperty("createdOn", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedOn { get; set; }

        [JsonProperty("updatedOn", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedOn { get; set; }

        [JsonProperty("deletedOn", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DeletedOn { get; set; }
    }

    public partial class MonitoringCompany
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("agency", NullValueHandling = NullValueHandling.Ignore)]
        public string Agency { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("doingBusinessAs", NullValueHandling = NullValueHandling.Ignore)]
        public string DoingBusinessAs { get; set; }

        [JsonProperty("amountOutstanding", NullValueHandling = NullValueHandling.Ignore)]
        public long? AmountOutstanding { get; set; }

        [JsonProperty("permit", NullValueHandling = NullValueHandling.Ignore)]
        public Permit Permit { get; set; }

        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public Phone Phone { get; set; }

        [JsonProperty("secondaryPhone", NullValueHandling = NullValueHandling.Ignore)]
        public Phone SecondaryPhone { get; set; }

        [JsonProperty("otherPhones", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> OtherPhones { get; set; }

        [JsonProperty("noResponseFlag", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? NoResponseFlag { get; set; }

        [JsonProperty("revokedFlag", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? RevokedFlag { get; set; }

        [JsonProperty("suspendedFlag", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? SuspendedFlag { get; set; }

        [JsonProperty("comments", NullValueHandling = NullValueHandling.Ignore)]
        public string Comments { get; set; }

        [JsonProperty("contact", NullValueHandling = NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [JsonProperty("otherContacts", NullValueHandling = NullValueHandling.Ignore)]
        public List<Contact> OtherContacts { get; set; }
    }
    
    public partial class Case
    {
        public static Case FromJson(string json) => JsonConvert.DeserializeObject<Case>(json, API.Models.v1.Converter.Settings);
    }

    public partial class Cases
    {
        public static List<Case> FromJson(string json) => JsonConvert.DeserializeObject<List<Case>>(json, API.Models.v1.Converter.Settings);
    }

    //public static class Serialize
    //{
    //    public static string ToJson(this CaseResponse self) => JsonConvert.SerializeObject(self, API.Models.v1.Converter.Settings);
    //}

    //internal static class Converter
    //{
    //    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    //    {
    //        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
    //        DateParseHandling = DateParseHandling.None,
    //        Converters =
    //        {
    //            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
    //        },
    //    };
    //}
}
