// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using API.Models.v1.Account;
//
//    var account = Account.FromJson(jsonString);

namespace API.Models.v1
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Account : CryWolf
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("agency", NullValueHandling = NullValueHandling.Ignore)]
        public string Agency { get; set; }

        [JsonProperty("lastName", NullValueHandling = NullValueHandling.Ignore)]
        public string LastName { get; set; }

        [JsonProperty("firstName", NullValueHandling = NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("locationType", NullValueHandling = NullValueHandling.Ignore)]
        public string LocationType { get; set; }

        [JsonProperty("beat", NullValueHandling = NullValueHandling.Ignore)]
        public string Beat { get; set; }

        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public string Notes { get; set; }

        [JsonProperty("amountOutstanding", NullValueHandling = NullValueHandling.Ignore)]
        public long? AmountOutstanding { get; set; }

        [JsonProperty("escrowBalance", NullValueHandling = NullValueHandling.Ignore)]
        public double EscrowBalance { get; set; }

        [JsonProperty("alarmSound", NullValueHandling = NullValueHandling.Ignore)]
        public string AlarmSound { get; set; }

        [JsonProperty("alarmTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> AlarmTypes { get; set; }

        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [JsonProperty("permit", NullValueHandling = NullValueHandling.Ignore)]
        public Permit Permit { get; set; }

        [JsonProperty("phone")]
        public object Phone { get; set; }

        [JsonProperty("secondaryPhone")]
        public object SecondaryPhone { get; set; }

        [JsonProperty("contact", NullValueHandling = NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [JsonProperty("otherContacts", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> OtherContacts { get; set; }

        [JsonProperty("monitoredBy", NullValueHandling = NullValueHandling.Ignore)]
        public MonitoredBy MonitoredBy { get; set; }

        [JsonProperty("installedBy")]
        public object InstalledBy { get; set; }

        [JsonProperty("soldBy")]
        public object SoldBy { get; set; }

        [JsonProperty("servicedBy")]
        public object ServicedBy { get; set; }

        [JsonProperty("createdOn", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        [JsonProperty("updatedOn", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("streetNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }

        [JsonProperty("streetName", NullValueHandling = NullValueHandling.Ignore)]
        public string StreetName { get; set; }

        [JsonProperty("suite")]
        public object Suite { get; set; }

        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("state", NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("postalCode", NullValueHandling = NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    }

    public partial class Contact
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("lastName", NullValueHandling = NullValueHandling.Ignore)]
        public string LastName { get; set; }

        [JsonProperty("firstName", NullValueHandling = NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [JsonProperty("middleInitial", NullValueHandling = NullValueHandling.Ignore)]
        public string MiddleInitial { get; set; }

        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public Phone Phone { get; set; }

        [JsonProperty("otherPhoneNumbers")]
        public List<Phone> OtherPhoneNumbers { get; set; }

        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [JsonProperty("otherAddresses")]
        public object OtherAddresses { get; set; }
    }

    public partial class Phone
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        [JsonProperty("extension")]
        public object Extension { get; set; }
    }

    public partial class MonitoredBy
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("agency", NullValueHandling = NullValueHandling.Ignore)]
        public string Agency { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("doingBusinessAs", NullValueHandling = NullValueHandling.Ignore)]
        public string DoingBusinessAs { get; set; }

        [JsonProperty("amountOutstanding", NullValueHandling = NullValueHandling.Ignore)]
        public long? AmountOutstanding { get; set; }

        [JsonProperty("noResponseFlag")]
        public object NoResponseFlag { get; set; }

        [JsonProperty("revokedFlag")]
        public object RevokedFlag { get; set; }

        [JsonProperty("suspendedFlag")]
        public object SuspendedFlag { get; set; }

        [JsonProperty("comments", NullValueHandling = NullValueHandling.Ignore)]
        public string Comments { get; set; }

        [JsonProperty("permit", NullValueHandling = NullValueHandling.Ignore)]
        public Permit Permit { get; set; }

        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public Phone Phone { get; set; }

        [JsonProperty("secondaryPhone", NullValueHandling = NullValueHandling.Ignore)]
        public Phone SecondaryPhone { get; set; }

        [JsonProperty("otherPhones")]
        public object OtherPhones { get; set; }

        [JsonProperty("contact", NullValueHandling = NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [JsonProperty("otherContacts", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> OtherContacts { get; set; }
    }

    public partial class Permit
    {
        [JsonProperty("issued", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime Issued { get; set; }

        [JsonProperty("expires", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime Expires { get; set; }
    }

    public partial class Account : CryWolf
    {
        public static Account FromJson(string json) => JsonConvert.DeserializeObject<Account>(json, API.Models.v1.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Account self) => JsonConvert.SerializeObject(self, API.Models.v1.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeLocal }
            },
        };
    }
}
